
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
    id 'com.github.node-gradle.node' version '3.5.1'

}


node {
    version = '22.10.0'
    npmVersion = '10.9.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
}

//springBoot {
//    mainClass = 'cl.myccontadores.CobrosApplication' // Replace with your actual main application class
//}

group = 'cl.myccontadores'
version = '0.1.1-SNAPSHOT'

bootJar {
    archiveBaseName = 'cobros'
    archiveVersion = version
    archiveClassifier = ''
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'org.mapstruct:mapstruct:1.6.3'

    implementation 'com.h2database:h2'

    // Documentacion Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootRun') {
    dependsOn 'buildFrontend'
}

def cobrosFrontDir = 'cobros_front'

tasks.register('startFullStack') {
    group = 'application'
    description = 'Construye el frontend y arranca el backend usando el servidor de Spring Boot'
    dependsOn 'bootRun'
}

//tasks.named('build') {
//    dependsOn 'buildFrontend'
//}

tasks.register('buildFrontend', NpmTask) {
    workingDir = file(cobrosFrontDir)
    args = ['install']

    doLast {
        exec {
            workingDir = file(cobrosFrontDir)
            commandLine 'npm', 'run', 'build'
        }

        copy {
            from file("${cobrosFrontDir}/www")
            into file('src/main/resources/static')
        }
    }
}



